const __supply = 10 * 10 ** 12; const __decimals = 10 ** 9; function comma(value) { return String(value).replace(/\d(?=(\d{3})+\.)/g, "$&,") } function fixed3(value) { return comma(value.toFixed(3)) } Vue.filter("fixed3", function (value) { return fixed3(value) }); Vue.filter("comma", function (value) { return comma(value) }); Vue.filter("address", function (value) { return value.substr(0, 6) + "......" + value.substr(-4) }); const abi = ["function balanceOf(address owner) view returns (uint256)", "function totalFees() view returns (uint256)"]; var app = new Vue({ el: "#app", data: { address: false, hasWallet: false, readcontract: false, balance: 0, totalFees: 0, symbol: "APE-X", stats: { price: 0, mcap: 0, supply: __supply, holders: 0 } }, mounted: function async() { if (window.ethereum) { this.hasWallet = true } const provider = new ethers.providers.JsonRpcProvider("https://api.avax.network/ext/bc/C/rpc"); this.readcontract = new ethers.Contract("0xd039C9079ca7F2a87D632A9C0d7cEa0137bAcFB5", abi, provider); this.refresh() }, computed: { apy: function () { return this.stats.volume / this.stats.price * .04 * (this.balance / __supply) }, circulating_supply: function () { return __supply - this.burnt_supply }, burnt_supply: function () { return __supply * .5 + this.totalFees * .45 / 2 }, liquidity: function () { return this.totalFees * .55 }, market_cap: function () { return this.circulating_supply * this.stats.price } }, methods: { refresh: async function () { if (this.readcontract) { await this.get_totalfees() } if (this.contract) { await this.get_balance() } $.get("/ticker.json", function (r) { t = r.tickers[0]; app.stats = { price: t.converted_last.usd, mcap: 0, supply: __supply, holders: r.token_holder_count, volume: t.converted_volume.usd } }) }, connect_wallet: function () { window.ethereum.enable().then(function () { const provider = new ethers.providers.Web3Provider(window.ethereum); provider.listAccounts().then(function (acc) { if (acc[0]) { app.address = acc[0]; app.get_balance() } else { app.address = "" } }) }) }, get_balance: function () { this.readcontract.balanceOf(this.address).then(function (bal) { app.balance = bal.toString() / __decimals }) }, get_totalfees: function () { this.readcontract.totalFees().then(function (fee) { app.totalFees = fee.toString() / __decimals }) } } }); $(function () { window.setInterval(app.refresh, 3e4) });